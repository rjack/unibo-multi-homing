%!PS-Adobe-3.0
%%Title: src/cqueue.c
%%For: jack
%%Creator: VIM - Vi IMproved 7.1 (2007 May 12)
%%CreationDate: Fri Mar 14 13:24:09 2008
%%DocumentData: Clean8Bit
%%Orientation: Portrait
%%Pages: (atend)
%%PageOrder: Ascend
%%BoundingBox: 59 49 564 800
%%DocumentMedia: A4 595 842 0 () ()
%%DocumentNeededResources: font Courier
%%+ font Courier-Bold
%%+ font Courier-Oblique
%%+ font Courier-BoldOblique
%%DocumentSuppliedResources: procset VIM-Prolog 1.4 1
%%+ encoding VIM-latin1 1.0 0
%%Requirements: duplex collate color
%%EndComments
%%BeginDefaults
%%PageResources: font Courier
%%+ font Courier-Bold
%%+ font Courier-Oblique
%%+ font Courier-BoldOblique
%%PageMedia: A4
%%EndDefaults
%%BeginProlog
%%BeginResource: procset VIM-Prolog
%%BeginDocument: /usr/share/vim/vim71/print/prolog.ps
%!PS-Adobe-3.0 Resource-ProcSet
%%Title: VIM-Prolog
%%Version: 1.4 1
%%EndComments
% Editing of this file is NOT RECOMMENDED.  You run a very good risk of causing
% all PostScript printing from VIM failing if you do.  PostScript is not called
% a write-only language for nothing!
/packedarray where not{userdict begin/setpacking/pop load def/currentpacking
false def end}{pop}ifelse/CP currentpacking def true setpacking
/bd{bind def}bind def/ld{load def}bd/ed{exch def}bd/d/def ld
/db{dict begin}bd/cde{currentdict end}bd
/T true d/F false d
/SO null d/sv{/SO save d}bd/re{SO restore}bd
/L2 systemdict/languagelevel 2 copy known{get exec}{pop pop 1}ifelse 2 ge d
/m/moveto ld/s/show ld /ms{m s}bd /g/setgray ld/r/setrgbcolor ld/sp{showpage}bd
/gs/gsave ld/gr/grestore ld/cp/currentpoint ld
/ul{gs UW setlinewidth cp UO add 2 copy newpath m 3 1 roll add exch lineto
stroke gr}bd
/bg{gs r cp BO add 4 -2 roll rectfill gr}bd
/sl{90 rotate 0 exch translate}bd
L2{
/sspd{mark exch{setpagedevice}stopped cleartomark}bd
/nc{1 db/NumCopies ed cde sspd}bd
/sps{3 db/Orientation ed[3 1 roll]/PageSize ed/ImagingBBox null d cde sspd}bd
/dt{2 db/Tumble ed/Duplex ed cde sspd}bd
/c{1 db/Collate ed cde sspd}bd
}{
/nc{/#copies ed}bd
/sps{statusdict/setpage get exec}bd
/dt{statusdict/settumble 2 copy known{get exec}{pop pop pop}ifelse
statusdict/setduplexmode 2 copy known{get exec}{pop pop pop}ifelse}bd
/c{pop}bd
}ifelse
/ffs{findfont exch scalefont d}bd/sf{setfont}bd
/ref{1 db findfont dup maxlength dict/NFD ed{exch dup/FID ne{exch NFD 3 1 roll
put}{pop pop}ifelse}forall/Encoding findresource dup length 256 eq{NFD/Encoding
3 -1 roll put}{pop}ifelse NFD dup/FontType get 3 ne{/CharStrings}{/CharProcs}
ifelse 2 copy known{2 copy get dup maxlength dict copy[/questiondown/space]{2
copy known{2 copy get 2 index/.notdef 3 -1 roll put pop exit}if pop}forall put
}{pop pop}ifelse dup NFD/FontName 3 -1 roll put NFD definefont pop end}bd
CP setpacking
(\004)cvn{}bd
% vim:ff=unix:
%%EOF
%%EndDocument
%%EndResource
%%BeginResource: encoding VIM-latin1
%%BeginDocument: /usr/share/vim/vim71/print/latin1.ps
%!PS-Adobe-3.0 Resource-Encoding
%%Title: VIM-latin1
%%Version: 1.0 0
%%EndComments
/VIM-latin1[
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/space /exclam /quotedbl /numbersign /dollar /percent /ampersand /quotesingle
/parenleft /parenright /asterisk /plus /comma /minus /period /slash
/zero /one /two /three /four /five /six /seven
/eight /nine /colon /semicolon /less /equal /greater /question
/at /A /B /C /D /E /F /G
/H /I /J /K /L /M /N /O
/P /Q /R /S /T /U /V /W
/X /Y /Z /bracketleft /backslash /bracketright /asciicircum /underscore
/grave /a /b /c /d /e /f /g
/h /i /j /k /l /m /n /o
/p /q /r /s /t /u /v /w
/x /y /z /braceleft /bar /braceright /asciitilde /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/space /exclamdown /cent /sterling /currency /yen /brokenbar /section
/dieresis /copyright /ordfeminine /guillemotleft /logicalnot /hyphen /registered /macron
/degree /plusminus /twosuperior /threesuperior /acute /mu /paragraph /periodcentered
/cedilla /onesuperior /ordmasculine /guillemotright /onequarter /onehalf /threequarters /questiondown
/Agrave /Aacute /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla
/Egrave /Eacute /Ecircumflex /Edieresis /Igrave /Iacute /Icircumflex /Idieresis
/Eth /Ntilde /Ograve /Oacute /Ocircumflex /Otilde /Odieresis /multiply
/Oslash /Ugrave /Uacute /Ucircumflex /Udieresis /Yacute /Thorn /germandbls
/agrave /aacute /acircumflex /atilde /adieresis /aring /ae /ccedilla
/egrave /eacute /ecircumflex /edieresis /igrave /iacute /icircumflex /idieresis
/eth /ntilde /ograve /oacute /ocircumflex /otilde /odieresis /divide
/oslash /ugrave /uacute /ucircumflex /udieresis /yacute /thorn /ydieresis]
/Encoding defineresource pop
% vim:ff=unix:
%%EOF
%%EndDocument
%%EndResource
%%EndProlog
%%BeginSetup
595 842 0 sps
1 nc
T F dt
T c
%%IncludeResource: font Courier
/_F0 /VIM-latin1 /Courier ref
/F0 10 /_F0 ffs
%%IncludeResource: font Courier-Bold
/_F1 /VIM-latin1 /Courier-Bold ref
/F1 10 /_F1 ffs
%%IncludeResource: font Courier-Oblique
/_F2 /VIM-latin1 /Courier-Oblique ref
/F2 10 /_F2 ffs
%%IncludeResource: font Courier-BoldOblique
/_F3 /VIM-latin1 /Courier-BoldOblique ref
/F3 10 /_F3 ffs
/UO -1 d
/UW 0.5 d
/BO -2.5 d
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
sv
0 g
F0 sf
%%EndPageSetup
F1 sf
(src/cqueue.c                                                                Pagina 1)59.5 792.4 ms
0 0 0.498 r
(#include )59.5 772.4 ms
0.498 0 0.498 r
("h/cqueue.h")s
0 0 0.498 r
(#include )59.5 762.4 ms
0.498 0 0.498 r
("h/segment.h")s
0 0 0.498 r
(#include )59.5 752.4 ms
0.498 0 0.498 r
("h/types.h")s
0 0 0.498 r
(#include )59.5 742.4 ms
0.498 0 0.498 r
("h/util.h")s
0 0 0.498 r
(#include )59.5 722.4 ms
0.498 0 0.498 r
(<config.h>)s
0 0 0.498 r
(#include )59.5 712.4 ms
0.498 0 0.498 r
(<string.h>)s
0 0.498 0.498 r
(/*******************************************************************************)59.5 682.4 ms
(                                    Macro)59.5 672.4 ms
(*******************************************************************************/)59.5 662.4 ms
(/* Incremento e decremento circolare. */)59.5 642.4 ms
0 0 0.498 r
(#define     CINC\(x,inc,len\)     \(\(x\) = \(\(x\) + \(inc\)\) % \(len\)\))59.5 632.4 ms
(#if !HAVE_MSG_NOSIGNAL)59.5 612.4 ms
(#define     MSG_NOSIGNAL     )59.5 602.4 ms
0.498 0 0.498 r
(0)s
0 0 0.498 r
(#endif)59.5 592.4 ms
0 0.498 0.498 r
(/*******************************************************************************)59.5 562.4 ms
(                       Prototipi delle funzioni locali)59.5 552.4 ms
(*******************************************************************************/)59.5 542.4 ms
0 0.498 0 r
(static)59.5 522.4 ms
F0 sf
0 g
( )s
F1 sf
0 0.498 0 r
(size_t)s
F0 sf
0 g
( cqueue_get_aval_chunk \()s
F1 sf
0 0.498 0 r
(const)s
F0 sf
0 g
( cqueue_t *cq\);)s
F1 sf
0 0.498 0 r
(static)59.5 512.4 ms
F0 sf
0 g
( )s
F1 sf
0 0.498 0 r
(size_t)s
F0 sf
0 g
( cqueue_get_used_chunk \()s
F1 sf
0 0.498 0 r
(const)s
F0 sf
0 g
( cqueue_t *cq\);)s
F1 sf
0 0.498 0.498 r
(/*******************************************************************************)59.5 482.4 ms
(                              Funzioni pubbliche)59.5 472.4 ms
(*******************************************************************************/)59.5 462.4 ms
0 0.498 0 r
(int)59.5 442.4 ms
F0 sf
0 g
(cqueue_add \(cqueue_t *cq, seg_t *buf, )59.5 432.4 ms
F1 sf
0 0.498 0 r
(size_t)s
F0 sf
0 g
( nbytes\))s
({)59.5 422.4 ms
(        )59.5 412.4 ms
F1 sf
0 0.498 0.498 r
(/* Copia nbytes bytes da buf in coda a cq.)s
(         * Ritorna 0 se riesce, -1 se cq non ha abbastanza spazio. */)59.5 402.4 ms
F0 sf
0 g
(        )59.5 382.4 ms
F1 sf
0 0.498 0 r
(size_t)s
F0 sf
0 g
( chunk_1;)s
(        )59.5 372.4 ms
F1 sf
0 0.498 0 r
(size_t)s
F0 sf
0 g
( chunk_2;)s
(        assert \(cq != )59.5 352.4 ms
F1 sf
0.498 0 0.498 r
(NULL)s
F0 sf
0 g
(\);)s
(        assert \(buf != )59.5 342.4 ms
F1 sf
0.498 0 0.498 r
(NULL)s
F0 sf
0 g
(\);)s
(        assert \(nbytes > )59.5 332.4 ms
F1 sf
0.498 0 0.498 r
(0)s
F0 sf
0 g
(\);)s
(        )59.5 312.4 ms
F1 sf
0.498 0.498 0 r
(if)s
F0 sf
0 g
( \(cqueue_get_aval \(cq\) >= nbytes\) {)s
(                assert \(cq->cq_wrap || cq->cq_tail >= cq->cq_head\);)59.5 302.4 ms
(                assert \(!cq->cq_wrap || cq->cq_tail < cq->cq_head\);)59.5 292.4 ms
(                chunk_1 = MIN \(cqueue_get_aval_chunk \(cq\), nbytes\);)59.5 272.4 ms
(                chunk_2 = \(nbytes > chunk_1 ? nbytes - chunk_1 : )59.5 262.4 ms
F1 sf
0.498 0 0.498 r
(0)s
F0 sf
0 g
(\);)s
(                memcpy \(&cq->cq_data[cq->cq_tail], buf, chunk_1\);)59.5 242.4 ms
(                CINC \(cq->cq_tail, chunk_1, cq->cq_len\);)59.5 232.4 ms
(                buf += chunk_1;)59.5 222.4 ms
(                )59.5 212.4 ms
F1 sf
0.498 0.498 0 r
(if)s
F0 sf
0 g
( \(cq->cq_tail == )s
F1 sf
0.498 0 0.498 r
(0)s
F0 sf
0 g
(\) {)s
(                        assert \(!cq->cq_wrap\);)59.5 202.4 ms
(                        cq->cq_wrap = TRUE;)59.5 192.4 ms
(                })59.5 182.4 ms
(                )59.5 162.4 ms
F1 sf
0.498 0.498 0 r
(if)s
F0 sf
0 g
( \(chunk_2 > )s
F1 sf
0.498 0 0.498 r
(0)s
F0 sf
0 g
(\) {)s
(                        memcpy \(&cq->cq_data[cq->cq_tail], buf, chunk_2\);)59.5 152.4 ms
(                        CINC \(cq->cq_tail, chunk_2, cq->cq_len\);)59.5 142.4 ms
(                })59.5 132.4 ms
(                )59.5 122.4 ms
F1 sf
0.498 0.498 0 r
(return)s
F0 sf
0 g
( )s
F1 sf
0.498 0 0.498 r
(0)s
F0 sf
0 g
(;)s
(        })59.5 112.4 ms
(        )59.5 102.4 ms
F1 sf
0.498 0.498 0 r
(return)s
F0 sf
0 g
( -)s
F1 sf
0.498 0 0.498 r
(1)s
F0 sf
0 g
(;)s
(})59.5 92.4 ms
F1 sf
0 0.498 0 r
(bool)59.5 62.4 ms
F0 sf
0 g
(cqueue_can_read \()59.5 52.4 ms
F1 sf
0 0.498 0 r
(void)s
F0 sf
0 g
( *arg\))s
re sp
%%PageTrailer
%%Page: 2 2
%%BeginPageSetup
sv
0 g
F0 sf
%%EndPageSetup
F1 sf
(src/cqueue.c                                                                Pagina 2)59.5 792.4 ms
F0 sf
({)59.5 772.4 ms
(        cqueue_t *cq;)59.5 762.4 ms
(        assert \(arg != )59.5 742.4 ms
F1 sf
0.498 0 0.498 r
(NULL)s
F0 sf
0 g
(\);)s
(        cq = \(cqueue_t *\) arg;)59.5 722.4 ms
(        )59.5 712.4 ms
F1 sf
0.498 0.498 0 r
(if)s
F0 sf
0 g
( \(cqueue_get_aval \(cq\) > )s
F1 sf
0.498 0 0.498 r
(0)s
F0 sf
0 g
(\))s
(                )59.5 702.4 ms
F1 sf
0.498 0.498 0 r
(return)s
F0 sf
0 g
( TRUE;)s
(        )59.5 692.4 ms
F1 sf
0.498 0.498 0 r
(return)s
F0 sf
0 g
( FALSE;)s
(})59.5 682.4 ms
F1 sf
0 0.498 0 r
(bool)59.5 652.4 ms
F0 sf
0 g
(cqueue_can_write \()59.5 642.4 ms
F1 sf
0 0.498 0 r
(void)s
F0 sf
0 g
( *arg\))s
({)59.5 632.4 ms
(        cqueue_t *cq;)59.5 622.4 ms
(        assert \(arg != )59.5 602.4 ms
F1 sf
0.498 0 0.498 r
(NULL)s
F0 sf
0 g
(\);)s
(        cq = \(cqueue_t *\) arg;)59.5 582.4 ms
(        )59.5 572.4 ms
F1 sf
0.498 0.498 0 r
(if)s
F0 sf
0 g
( \(cqueue_get_used \(cq\) > )s
F1 sf
0.498 0 0.498 r
(0)s
F0 sf
0 g
(\))s
(                )59.5 562.4 ms
F1 sf
0.498 0.498 0 r
(return)s
F0 sf
0 g
( TRUE;)s
(        )59.5 552.4 ms
F1 sf
0.498 0.498 0 r
(return)s
F0 sf
0 g
( FALSE;)s
(})59.5 542.4 ms
(cqueue_t *)59.5 512.4 ms
(cqueue_create \()59.5 502.4 ms
F1 sf
0 0.498 0 r
(size_t)s
F0 sf
0 g
( len\))s
({)59.5 492.4 ms
(        cqueue_t *cq;)59.5 482.4 ms
(        assert \(len > )59.5 462.4 ms
F1 sf
0.498 0 0.498 r
(0)s
F0 sf
0 g
(\);)s
(        cq = xmalloc \()59.5 442.4 ms
F1 sf
0.498 0.498 0 r
(sizeof)s
F0 sf
0 g
( \(cqueue_t\)\);)s
(        cq->cq_data = xmalloc \(len * )59.5 432.4 ms
F1 sf
0.498 0.498 0 r
(sizeof)s
F0 sf
0 g
( \(seg_t\)\);)s
(        cq->cq_len = len;)59.5 422.4 ms
(        cq->cq_head = )59.5 412.4 ms
F1 sf
0.498 0 0.498 r
(0)s
F0 sf
0 g
(;)s
(        cq->cq_tail = )59.5 402.4 ms
F1 sf
0.498 0 0.498 r
(0)s
F0 sf
0 g
(;)s
(        cq->cq_wrap = FALSE;)59.5 392.4 ms
(        )59.5 372.4 ms
F1 sf
0.498 0.498 0 r
(return)s
F0 sf
0 g
( cq;)s
(})59.5 362.4 ms
F1 sf
0 0.498 0 r
(void)59.5 332.4 ms
F0 sf
0 g
(cqueue_destroy \(cqueue_t *cq\))59.5 322.4 ms
({)59.5 312.4 ms
(        assert \(cq != )59.5 302.4 ms
F1 sf
0.498 0 0.498 r
(NULL)s
F0 sf
0 g
(\);)s
(        xfree \(cq->cq_data\);)59.5 282.4 ms
(        xfree \(cq\);)59.5 272.4 ms
(})59.5 262.4 ms
F1 sf
0 0.498 0 r
(void)59.5 232.4 ms
F0 sf
0 g
(cqueue_drop_head \(cqueue_t *cq, )59.5 222.4 ms
F1 sf
0 0.498 0 r
(size_t)s
F0 sf
0 g
( nbytes\))s
({)59.5 212.4 ms
(        )59.5 202.4 ms
F1 sf
0 0.498 0.498 r
(/* Scart nbytes bytes dalla testa di cq. */)s
F0 sf
0 g
(        assert \(cq != )59.5 182.4 ms
F1 sf
0.498 0 0.498 r
(NULL)s
F0 sf
0 g
(\);)s
(        assert \(nbytes > )59.5 172.4 ms
F1 sf
0.498 0 0.498 r
(0)s
F0 sf
0 g
(\);)s
(        assert \(nbytes <= cqueue_get_used \(cq\)\);)59.5 162.4 ms
(        CINC \(cq->cq_head, nbytes, cq->cq_len\);)59.5 142.4 ms
(        )59.5 132.4 ms
F1 sf
0.498 0.498 0 r
(if)s
F0 sf
0 g
( \(cq->cq_head <= cq->cq_tail\))s
(                cq->cq_wrap = FALSE;)59.5 122.4 ms
(})59.5 112.4 ms
F1 sf
0 0.498 0 r
(void)59.5 82.4 ms
F0 sf
0 g
(cqueue_drop_tail \(cqueue_t *cq, )59.5 72.4 ms
F1 sf
0 0.498 0 r
(size_t)s
F0 sf
0 g
( nbytes\))s
({)59.5 62.4 ms
(        )59.5 52.4 ms
F1 sf
0 0.498 0.498 r
(/* Scarta nbytes bytes dalla coda di cq. */)s
re sp
%%PageTrailer
%%Page: 3 3
%%BeginPageSetup
sv
0 g
F0 sf
%%EndPageSetup
F1 sf
(src/cqueue.c                                                                Pagina 3)59.5 792.4 ms
F0 sf
(        assert \(cq != )59.5 762.4 ms
F1 sf
0.498 0 0.498 r
(NULL)s
F0 sf
0 g
(\);)s
(        assert \(nbytes > )59.5 752.4 ms
F1 sf
0.498 0 0.498 r
(0)s
F0 sf
0 g
(\);)s
(        assert \(nbytes <= cqueue_get_used \(cq\)\);)59.5 742.4 ms
(        )59.5 722.4 ms
F1 sf
0.498 0.498 0 r
(if)s
F0 sf
0 g
( \(nbytes > cq->cq_tail\) {)s
(                nbytes -= cq->cq_tail;)59.5 712.4 ms
(                cq->cq_tail = cq->cq_len;)59.5 702.4 ms
(        })59.5 692.4 ms
(        cq->cq_tail -= nbytes;)59.5 682.4 ms
(        )59.5 662.4 ms
F1 sf
0.498 0.498 0 r
(if)s
F0 sf
0 g
( \(cq->cq_head <= cq->cq_tail\))s
(                cq->cq_wrap = FALSE;)59.5 652.4 ms
(})59.5 642.4 ms
F1 sf
0 0.498 0 r
(size_t)59.5 612.4 ms
F0 sf
0 g
(cqueue_get_aval \(cqueue_t *cq\))59.5 602.4 ms
({)59.5 592.4 ms
(        )59.5 582.4 ms
F1 sf
0 0.498 0.498 r
(/* Ritorna il numero di byte disponibili in cq. */)s
F0 sf
0 g
(        )59.5 562.4 ms
F1 sf
0 0.498 0 r
(size_t)s
F0 sf
0 g
( aval;)s
(        assert \(cq != )59.5 542.4 ms
F1 sf
0.498 0 0.498 r
(NULL)s
F0 sf
0 g
(\);)s
(        )59.5 522.4 ms
F1 sf
0.498 0.498 0 r
(if)s
F0 sf
0 g
( \(cq->cq_wrap\) {)s
(                assert \(cq->cq_head >= cq->cq_tail\);)59.5 512.4 ms
(                aval = cq->cq_head - cq->cq_tail;)59.5 502.4 ms
(        } )59.5 492.4 ms
F1 sf
0.498 0.498 0 r
(else)s
F0 sf
0 g
( {)s
(                assert \(cq->cq_head <= cq->cq_tail\);)59.5 482.4 ms
(                aval = cq->cq_len - \(cq->cq_tail - cq->cq_head\);)59.5 472.4 ms
(        })59.5 462.4 ms
(        )59.5 452.4 ms
F1 sf
0.498 0.498 0 r
(return)s
F0 sf
0 g
( aval;)s
(})59.5 442.4 ms
F1 sf
0 0.498 0 r
(size_t)59.5 412.4 ms
F0 sf
0 g
(cqueue_get_used \(cqueue_t *cq\))59.5 402.4 ms
({)59.5 392.4 ms
(        )59.5 382.4 ms
F1 sf
0 0.498 0.498 r
(/* Ritorna il numero di byte usati in cq. */)s
F0 sf
0 g
(        assert \(cq != )59.5 362.4 ms
F1 sf
0.498 0 0.498 r
(NULL)s
F0 sf
0 g
(\);)s
(        )59.5 352.4 ms
F1 sf
0.498 0.498 0 r
(return)s
F0 sf
0 g
( \(cq->cq_len - cqueue_get_aval \(cq\)\);)s
(})59.5 342.4 ms
F1 sf
0 0.498 0 r
(size_t)59.5 312.4 ms
F0 sf
0 g
(cqueue_seglen \(cqueue_t *cq\))59.5 302.4 ms
({)59.5 292.4 ms
(        )59.5 282.4 ms
F1 sf
0 0.498 0.498 r
(/* Ritorna la lunghezza del primo segmento contenuto se cq ha in testa)s
(         * un segmento completo, 0 altrimenti.)59.5 272.4 ms
(         * )59.5 262.4 ms
F0 sf
0 g
(XXX)s
F1 sf
0 0.498 0.498 r
( assume che il byte in testa sia l'inizio di un segmento e che)s
(         * quindi contenga il campo flags. */)59.5 252.4 ms
F0 sf
0 g
(        seg_t *flgptr;)59.5 232.4 ms
(        )59.5 222.4 ms
F1 sf
0 0.498 0 r
(size_t)s
F0 sf
0 g
( used;)s
(        assert \(cq != )59.5 202.4 ms
F1 sf
0.498 0 0.498 r
(NULL)s
F0 sf
0 g
(\);)s
(        used = cqueue_get_used \(cq\);)59.5 182.4 ms
(        )59.5 172.4 ms
F1 sf
0.498 0.498 0 r
(if)s
F0 sf
0 g
( \(used == )s
F1 sf
0.498 0 0.498 r
(0)s
F0 sf
0 g
(\))s
(                )59.5 162.4 ms
F1 sf
0.498 0.498 0 r
(return)s
F0 sf
0 g
( )s
F1 sf
0.498 0 0.498 r
(0)s
F0 sf
0 g
(;)s
(        flgptr = &cq->cq_data[cq->cq_head];)59.5 142.4 ms
(        )59.5 122.4 ms
F1 sf
0.498 0.498 0 r
(if)s
F0 sf
0 g
( \(seg_is_nak \(flgptr\) && used >= NAKLEN\))s
(                )59.5 112.4 ms
F1 sf
0.498 0.498 0 r
(return)s
F0 sf
0 g
( NAKLEN;)s
(        )59.5 92.4 ms
F1 sf
0.498 0.498 0 r
(if)s
F0 sf
0 g
( \(seg_is_ack \(flgptr\) && used >= ACKLEN\))s
(                )59.5 82.4 ms
F1 sf
0.498 0.498 0 r
(return)s
F0 sf
0 g
( ACKLEN;)s
(        assert \(*flgptr & PLDFLAG\);)59.5 62.4 ms
re sp
%%PageTrailer
%%Page: 4 4
%%BeginPageSetup
sv
0 g
F0 sf
%%EndPageSetup
F1 sf
(src/cqueue.c                                                                Pagina 4)59.5 792.4 ms
F0 sf
(        )59.5 772.4 ms
F1 sf
0 0.498 0.498 r
(/* Payload di lunghezza standard. */)s
F0 sf
0 g
(        )59.5 762.4 ms
F1 sf
0.498 0.498 0 r
(if)s
F0 sf
0 g
( \(!\(*flgptr & LENFLAG\)\) {)s
(                )59.5 752.4 ms
F1 sf
0.498 0.498 0 r
(if)s
F0 sf
0 g
( \(used >= FLGLEN + SEQLEN + PLDDEFLEN\))s
(                        )59.5 742.4 ms
F1 sf
0.498 0.498 0 r
(return)s
F0 sf
0 g
( \(FLGLEN + SEQLEN + PLDDEFLEN\);)s
(        })59.5 732.4 ms
(        )59.5 722.4 ms
F1 sf
0 0.498 0.498 r
(/* Payload di lunghezza non standard, bisogna accedere al campo len,)s
(         * se presente. */)59.5 712.4 ms
F0 sf
0 g
(        )59.5 702.4 ms
F1 sf
0.498 0.498 0 r
(else)s
F0 sf
0 g
( )s
F1 sf
0.498 0.498 0 r
(if)s
F0 sf
0 g
( \(used > LEN\) {)s
(                )59.5 692.4 ms
F1 sf
0 0.498 0 r
(int)s
F0 sf
0 g
( i;)s
(                i = \(cq->cq_head + LEN\) % cq->cq_len;)59.5 682.4 ms
(                )59.5 672.4 ms
F1 sf
0.498 0.498 0 r
(if)s
F0 sf
0 g
( \(used >= FLGLEN + SEQLEN + LENLEN + cq->cq_data[i]\))s
(                        )59.5 662.4 ms
F1 sf
0.498 0.498 0 r
(return)s
F0 sf
0 g
( \(FLGLEN + SEQLEN + LENLEN + cq->cq_data[i]\);)s
(        })59.5 652.4 ms
(        )59.5 642.4 ms
F1 sf
0.498 0.498 0 r
(return)s
F0 sf
0 g
( )s
F1 sf
0.498 0 0.498 r
(0)s
F0 sf
0 g
(;)s
(})59.5 632.4 ms
F1 sf
0 0.498 0 r
(size_t)59.5 602.4 ms
F0 sf
0 g
(cqueue_read \(fd_t fd, cqueue_t *cq\))59.5 592.4 ms
({)59.5 582.4 ms
(        )59.5 572.4 ms
F1 sf
0 0.498 0.498 r
(/* Legge piu' byte possibili da fd e li salva in cq.)s
(         * Ritorna il numero di byte letti \(0 o piu'\).)59.5 562.4 ms
(         * In caso di errore imposta errno come quello di read, altrimenti a)59.5 552.4 ms
(         * zero; se la read legge l'EOF imposta errno a EREOF. */)59.5 542.4 ms
F0 sf
0 g
(        )59.5 522.4 ms
F1 sf
0 0.498 0 r
(ssize_t)s
F0 sf
0 g
( nread;)s
(        )59.5 512.4 ms
F1 sf
0 0.498 0 r
(size_t)s
F0 sf
0 g
( nrcvd;)s
(        )59.5 502.4 ms
F1 sf
0 0.498 0 r
(size_t)s
F0 sf
0 g
( chunk;)s
(        assert \(fd > )59.5 482.4 ms
F1 sf
0.498 0 0.498 r
(0)s
F0 sf
0 g
(\);)s
(        assert \(cq != )59.5 472.4 ms
F1 sf
0.498 0 0.498 r
(NULL)s
F0 sf
0 g
(\);)s
(        assert \(cqueue_get_aval \(cq\) > )59.5 462.4 ms
F1 sf
0.498 0 0.498 r
(0)s
F0 sf
0 g
(\);)s
(        chunk = cqueue_get_aval_chunk \(cq\);)59.5 442.4 ms
(        assert \(chunk > )59.5 432.4 ms
F1 sf
0.498 0 0.498 r
(0)s
F0 sf
0 g
(\);)s
(        )59.5 412.4 ms
F1 sf
0 0.498 0.498 r
(/* Questo ciclo viene eseguito al massimo due volte. */)s
F0 sf
0 g
(        nrcvd = )59.5 402.4 ms
F1 sf
0.498 0 0.498 r
(0)s
F0 sf
0 g
(;)s
(        )59.5 392.4 ms
F1 sf
0.498 0.498 0 r
(do)s
F0 sf
0 g
( {)s
(                nread = read \(fd, &\(cq->cq_data[cq->cq_tail]\), chunk\);)59.5 382.4 ms
(                )59.5 372.4 ms
F1 sf
0.498 0.498 0 r
(if)s
F0 sf
0 g
( \(nread > )s
F1 sf
0.498 0 0.498 r
(0)s
F0 sf
0 g
(\) {)s
(                        nrcvd += nread;)59.5 362.4 ms
(                        CINC \(cq->cq_tail, nread, cq->cq_len\);)59.5 352.4 ms
(                        )59.5 342.4 ms
F1 sf
0.498 0.498 0 r
(if)s
F0 sf
0 g
( \(cq->cq_tail == )s
F1 sf
0.498 0 0.498 r
(0)s
F0 sf
0 g
(\) {)s
(                                assert \(!cq->cq_wrap\);)59.5 332.4 ms
(                                cq->cq_wrap = TRUE;)59.5 322.4 ms
(                                )59.5 312.4 ms
F1 sf
0 0.498 0.498 r
(/* Se chunk > 0 vinciamo un altro giro. */)s
F0 sf
0 g
(                                chunk = cqueue_get_aval_chunk \(cq\);)59.5 302.4 ms
(                        })59.5 292.4 ms
(                })59.5 282.4 ms
(        } )59.5 272.4 ms
F1 sf
0.498 0.498 0 r
(while)s
F0 sf
0 g
( \(\(nread > )s
F1 sf
0.498 0 0.498 r
(0)s
F0 sf
0 g
( && cq->cq_tail == )s
F1 sf
0.498 0 0.498 r
(0)s
F0 sf
0 g
( && chunk > )s
F1 sf
0.498 0 0.498 r
(0)s
F0 sf
0 g
(\))s
(                  || \(nread == -)59.5 262.4 ms
F1 sf
0.498 0 0.498 r
(1)s
F0 sf
0 g
( && errno == )s
F1 sf
0.498 0 0.498 r
(EINTR)s
F0 sf
0 g
(\)\);)s
(        )59.5 242.4 ms
F1 sf
0.498 0.498 0 r
(if)s
F0 sf
0 g
( \(nread > )s
F1 sf
0.498 0 0.498 r
(0)s
F0 sf
0 g
(            || \(nread == -)59.5 232.4 ms
F1 sf
0.498 0 0.498 r
(1)s
F0 sf
0 g
( && errno == )s
F1 sf
0.498 0 0.498 r
(EAGAIN)s
F0 sf
0 g
(\)\))s
(                errno = )59.5 222.4 ms
F1 sf
0.498 0 0.498 r
(0)s
F0 sf
0 g
(;)s
(        )59.5 212.4 ms
F1 sf
0.498 0.498 0 r
(else)s
F0 sf
0 g
( )s
F1 sf
0.498 0.498 0 r
(if)s
F0 sf
0 g
( \(nread == )s
F1 sf
0.498 0 0.498 r
(0)s
F0 sf
0 g
(\))s
(                errno = EREOF;)59.5 202.4 ms
(        )59.5 182.4 ms
F1 sf
0.498 0.498 0 r
(return)s
F0 sf
0 g
( nrcvd;)s
(})59.5 172.4 ms
F1 sf
0 0.498 0 r
(int)59.5 142.4 ms
F0 sf
0 g
(cqueue_remove \(cqueue_t *cq, seg_t *buf, )59.5 132.4 ms
F1 sf
0 0.498 0 r
(size_t)s
F0 sf
0 g
( nbytes\))s
({)59.5 122.4 ms
(        )59.5 112.4 ms
F1 sf
0 0.498 0.498 r
(/* Copia nbytes byte dalla testa di cq in buf rimuovendoli da cq. */)s
F0 sf
0 g
(        )59.5 92.4 ms
F1 sf
0 0.498 0 r
(size_t)s
F0 sf
0 g
( chunk_1;)s
(        )59.5 82.4 ms
F1 sf
0 0.498 0 r
(size_t)s
F0 sf
0 g
( chunk_2;)s
(        assert \(cq != )59.5 62.4 ms
F1 sf
0.498 0 0.498 r
(NULL)s
F0 sf
0 g
(\);)s
(        assert \(buf != )59.5 52.4 ms
F1 sf
0.498 0 0.498 r
(NULL)s
F0 sf
0 g
(\);)s
re sp
%%PageTrailer
%%Page: 5 5
%%BeginPageSetup
sv
0 g
F0 sf
%%EndPageSetup
F1 sf
(src/cqueue.c                                                                Pagina 5)59.5 792.4 ms
F0 sf
(        )59.5 762.4 ms
F1 sf
0.498 0.498 0 r
(if)s
F0 sf
0 g
( \(cqueue_get_used \(cq\) >= nbytes\) {)s
(                assert \(cq->cq_wrap || cq->cq_tail > cq->cq_head\);)59.5 752.4 ms
(                assert \(!cq->cq_wrap || cq->cq_tail <= cq->cq_head\);)59.5 742.4 ms
(                chunk_1 = MIN \(cqueue_get_used_chunk \(cq\), nbytes\);)59.5 722.4 ms
(                chunk_2 = \(nbytes > chunk_1 ? nbytes - chunk_1 : )59.5 712.4 ms
F1 sf
0.498 0 0.498 r
(0)s
F0 sf
0 g
(\);)s
(                memcpy \(buf, &\(cq->cq_data[cq->cq_head]\), chunk_1\);)59.5 692.4 ms
(                CINC \(cq->cq_head, chunk_1, cq->cq_len\);)59.5 682.4 ms
(                buf += chunk_1;)59.5 672.4 ms
(                )59.5 662.4 ms
F1 sf
0.498 0.498 0 r
(if)s
F0 sf
0 g
( \(cq->cq_head == )s
F1 sf
0.498 0 0.498 r
(0)s
F0 sf
0 g
(\) {)s
(                        assert \(cq->cq_wrap\);)59.5 652.4 ms
(                        cq->cq_wrap = FALSE;)59.5 642.4 ms
(                })59.5 632.4 ms
(                )59.5 612.4 ms
F1 sf
0.498 0.498 0 r
(if)s
F0 sf
0 g
( \(chunk_2 > )s
F1 sf
0.498 0 0.498 r
(0)s
F0 sf
0 g
(\) {)s
(                        memcpy \(buf, &\(cq->cq_data[cq->cq_head]\), chunk_2\);)59.5 602.4 ms
(                        CINC \(cq->cq_head, chunk_2, cq->cq_len\);)59.5 592.4 ms
(                })59.5 582.4 ms
(                )59.5 572.4 ms
F1 sf
0.498 0.498 0 r
(return)s
F0 sf
0 g
( )s
F1 sf
0.498 0 0.498 r
(0)s
F0 sf
0 g
(;)s
(        })59.5 562.4 ms
(        )59.5 552.4 ms
F1 sf
0.498 0.498 0 r
(return)s
F0 sf
0 g
( -)s
F1 sf
0.498 0 0.498 r
(1)s
F0 sf
0 g
(;)s
(})59.5 542.4 ms
F1 sf
0 0.498 0 r
(size_t)59.5 512.4 ms
F0 sf
0 g
(cqueue_write \(fd_t fd, cqueue_t *cq\))59.5 502.4 ms
({)59.5 492.4 ms
(        )59.5 482.4 ms
F1 sf
0 0.498 0.498 r
(/* Scrive piu' dati possibile sul file descriptor fd dalla coda cq.)s
(         * Ritorna il numero di byte spediti \(0 o piu'\).)59.5 472.4 ms
(         * In caso di errore imposta l'errno come quello di send, altrimenti a)59.5 462.4 ms
(         * zero. */)59.5 452.4 ms
F0 sf
0 g
(        )59.5 432.4 ms
F1 sf
0 0.498 0 r
(ssize_t)s
F0 sf
0 g
( nwrite;)s
(        )59.5 422.4 ms
F1 sf
0 0.498 0 r
(size_t)s
F0 sf
0 g
( nsent;)s
(        )59.5 412.4 ms
F1 sf
0 0.498 0 r
(size_t)s
F0 sf
0 g
( chunk;)s
(        assert \(fd > )59.5 392.4 ms
F1 sf
0.498 0 0.498 r
(0)s
F0 sf
0 g
(\);)s
(        assert \(cq != )59.5 382.4 ms
F1 sf
0.498 0 0.498 r
(NULL)s
F0 sf
0 g
(\);)s
(        assert \(cqueue_get_used \(cq\) > )59.5 372.4 ms
F1 sf
0.498 0 0.498 r
(0)s
F0 sf
0 g
(\);)s
(        chunk = cqueue_get_used_chunk \(cq\);)59.5 352.4 ms
(        assert \(chunk > )59.5 342.4 ms
F1 sf
0.498 0 0.498 r
(0)s
F0 sf
0 g
(\);)s
(        )59.5 322.4 ms
F1 sf
0 0.498 0.498 r
(/* Questo ciclo viene eseguito al massimo due volte: se la coda ha)s
(         * ciclato e la prima iterazione scrive tutti i dati dalla testa alla)59.5 312.4 ms
(         * fine del buffer, prova a scrivere anche i dati dall'inizio del)59.5 302.4 ms
(         * buffer alla coda. */)59.5 292.4 ms
F0 sf
0 g
(        nsent = )59.5 282.4 ms
F1 sf
0.498 0 0.498 r
(0)s
F0 sf
0 g
(;)s
(        )59.5 272.4 ms
F1 sf
0.498 0.498 0 r
(do)s
F0 sf
0 g
( {)s
(                nwrite = send \(fd, &\(cq->cq_data[cq->cq_head]\), chunk,)59.5 262.4 ms
(                                MSG_NOSIGNAL\);)59.5 252.4 ms
(                assert \(nwrite != )59.5 242.4 ms
F1 sf
0.498 0 0.498 r
(0)s
F0 sf
0 g
(\);)s
(                )59.5 232.4 ms
F1 sf
0.498 0.498 0 r
(if)s
F0 sf
0 g
( \(nwrite > )s
F1 sf
0.498 0 0.498 r
(0)s
F0 sf
0 g
(\) {)s
(                        nsent += nwrite;)59.5 222.4 ms
(                        CINC \(cq->cq_head, nwrite, cq->cq_len\);)59.5 212.4 ms
(                        )59.5 202.4 ms
F1 sf
0.498 0.498 0 r
(if)s
F0 sf
0 g
( \(cq->cq_head == )s
F1 sf
0.498 0 0.498 r
(0)s
F0 sf
0 g
(\) {)s
(                                assert \(cq->cq_wrap\);)59.5 192.4 ms
(                                cq->cq_wrap = FALSE;)59.5 182.4 ms
(                                )59.5 172.4 ms
F1 sf
0 0.498 0.498 r
(/* Se chunk > 0 vinciamo un altro giro. */)s
F0 sf
0 g
(                                chunk = cqueue_get_used_chunk \(cq\);)59.5 162.4 ms
(                        })59.5 152.4 ms
(                })59.5 142.4 ms
(        } )59.5 132.4 ms
F1 sf
0.498 0.498 0 r
(while)s
F0 sf
0 g
( \(\(nwrite > )s
F1 sf
0.498 0 0.498 r
(0)s
F0 sf
0 g
( && cq->cq_head == )s
F1 sf
0.498 0 0.498 r
(0)s
F0 sf
0 g
( && chunk > )s
F1 sf
0.498 0 0.498 r
(0)s
F0 sf
0 g
(\))s
(                  || \(nwrite == -)59.5 122.4 ms
F1 sf
0.498 0 0.498 r
(1)s
F0 sf
0 g
( && errno == )s
F1 sf
0.498 0 0.498 r
(EINTR)s
F0 sf
0 g
(\)\);)s
(        )59.5 102.4 ms
F1 sf
0 0.498 0.498 r
(/* Pulisce il valore di errno se tutto e' andato liscio. */)s
F0 sf
0 g
(        )59.5 92.4 ms
F1 sf
0.498 0.498 0 r
(if)s
F0 sf
0 g
( \(nwrite > )s
F1 sf
0.498 0 0.498 r
(0)s
F0 sf
0 g
(            || \(nwrite == -)59.5 82.4 ms
F1 sf
0.498 0 0.498 r
(1)s
F0 sf
0 g
( && errno == )s
F1 sf
0.498 0 0.498 r
(EAGAIN)s
F0 sf
0 g
(\)\))s
(                errno = )59.5 72.4 ms
F1 sf
0.498 0 0.498 r
(0)s
F0 sf
0 g
(;)s
(        )59.5 52.4 ms
F1 sf
0.498 0.498 0 r
(return)s
F0 sf
0 g
( nsent;)s
re sp
%%PageTrailer
%%Page: 6 6
%%BeginPageSetup
sv
0 g
F0 sf
%%EndPageSetup
F1 sf
(src/cqueue.c                                                                Pagina 6)59.5 792.4 ms
F0 sf
(})59.5 772.4 ms
F1 sf
0 0.498 0.498 r
(/*******************************************************************************)59.5 742.4 ms
(                               Funzioni locali)59.5 732.4 ms
(*******************************************************************************/)59.5 722.4 ms
0 0.498 0 r
(static)59.5 702.4 ms
F0 sf
0 g
( )s
F1 sf
0 0.498 0 r
(size_t)s
F0 sf
0 g
(cqueue_get_aval_chunk \()59.5 692.4 ms
F1 sf
0 0.498 0 r
(const)s
F0 sf
0 g
( cqueue_t *cq\))s
({)59.5 682.4 ms
(        assert \(cq != )59.5 672.4 ms
F1 sf
0.498 0 0.498 r
(NULL)s
F0 sf
0 g
(\);)s
(        )59.5 662.4 ms
F1 sf
0.498 0.498 0 r
(return)s
F0 sf
0 g
( \(cq->cq_wrap ?)s
(                cq->cq_head :)59.5 652.4 ms
(                cq->cq_len\) - cq->cq_tail;)59.5 642.4 ms
(})59.5 632.4 ms
F1 sf
0 0.498 0 r
(static)59.5 602.4 ms
F0 sf
0 g
( )s
F1 sf
0 0.498 0 r
(size_t)s
F0 sf
0 g
(cqueue_get_used_chunk \()59.5 592.4 ms
F1 sf
0 0.498 0 r
(const)s
F0 sf
0 g
( cqueue_t *cq\))s
({)59.5 582.4 ms
(        assert \(cq != )59.5 572.4 ms
F1 sf
0.498 0 0.498 r
(NULL)s
F0 sf
0 g
(\);)s
(        )59.5 562.4 ms
F1 sf
0.498 0.498 0 r
(return)s
F0 sf
0 g
( \(cq->cq_wrap ?)s
(                cq->cq_len :)59.5 552.4 ms
(                cq->cq_tail\) - cq->cq_head;)59.5 542.4 ms
(})59.5 532.4 ms
re sp
%%PageTrailer
%%Trailer
%%Pages: 6
%%EOF
