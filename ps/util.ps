%!PS-Adobe-3.0
%%Title: src/util.c
%%For: jack
%%Creator: VIM - Vi IMproved 7.1 (2007 May 12)
%%CreationDate: Fri Mar 14 13:25:27 2008
%%DocumentData: Clean8Bit
%%Orientation: Portrait
%%Pages: (atend)
%%PageOrder: Ascend
%%BoundingBox: 59 49 564 800
%%DocumentMedia: A4 595 842 0 () ()
%%DocumentNeededResources: font Courier
%%+ font Courier-Bold
%%+ font Courier-Oblique
%%+ font Courier-BoldOblique
%%DocumentSuppliedResources: procset VIM-Prolog 1.4 1
%%+ encoding VIM-latin1 1.0 0
%%Requirements: duplex collate color
%%EndComments
%%BeginDefaults
%%PageResources: font Courier
%%+ font Courier-Bold
%%+ font Courier-Oblique
%%+ font Courier-BoldOblique
%%PageMedia: A4
%%EndDefaults
%%BeginProlog
%%BeginResource: procset VIM-Prolog
%%BeginDocument: /usr/share/vim/vim71/print/prolog.ps
%!PS-Adobe-3.0 Resource-ProcSet
%%Title: VIM-Prolog
%%Version: 1.4 1
%%EndComments
% Editing of this file is NOT RECOMMENDED.  You run a very good risk of causing
% all PostScript printing from VIM failing if you do.  PostScript is not called
% a write-only language for nothing!
/packedarray where not{userdict begin/setpacking/pop load def/currentpacking
false def end}{pop}ifelse/CP currentpacking def true setpacking
/bd{bind def}bind def/ld{load def}bd/ed{exch def}bd/d/def ld
/db{dict begin}bd/cde{currentdict end}bd
/T true d/F false d
/SO null d/sv{/SO save d}bd/re{SO restore}bd
/L2 systemdict/languagelevel 2 copy known{get exec}{pop pop 1}ifelse 2 ge d
/m/moveto ld/s/show ld /ms{m s}bd /g/setgray ld/r/setrgbcolor ld/sp{showpage}bd
/gs/gsave ld/gr/grestore ld/cp/currentpoint ld
/ul{gs UW setlinewidth cp UO add 2 copy newpath m 3 1 roll add exch lineto
stroke gr}bd
/bg{gs r cp BO add 4 -2 roll rectfill gr}bd
/sl{90 rotate 0 exch translate}bd
L2{
/sspd{mark exch{setpagedevice}stopped cleartomark}bd
/nc{1 db/NumCopies ed cde sspd}bd
/sps{3 db/Orientation ed[3 1 roll]/PageSize ed/ImagingBBox null d cde sspd}bd
/dt{2 db/Tumble ed/Duplex ed cde sspd}bd
/c{1 db/Collate ed cde sspd}bd
}{
/nc{/#copies ed}bd
/sps{statusdict/setpage get exec}bd
/dt{statusdict/settumble 2 copy known{get exec}{pop pop pop}ifelse
statusdict/setduplexmode 2 copy known{get exec}{pop pop pop}ifelse}bd
/c{pop}bd
}ifelse
/ffs{findfont exch scalefont d}bd/sf{setfont}bd
/ref{1 db findfont dup maxlength dict/NFD ed{exch dup/FID ne{exch NFD 3 1 roll
put}{pop pop}ifelse}forall/Encoding findresource dup length 256 eq{NFD/Encoding
3 -1 roll put}{pop}ifelse NFD dup/FontType get 3 ne{/CharStrings}{/CharProcs}
ifelse 2 copy known{2 copy get dup maxlength dict copy[/questiondown/space]{2
copy known{2 copy get 2 index/.notdef 3 -1 roll put pop exit}if pop}forall put
}{pop pop}ifelse dup NFD/FontName 3 -1 roll put NFD definefont pop end}bd
CP setpacking
(\004)cvn{}bd
% vim:ff=unix:
%%EOF
%%EndDocument
%%EndResource
%%BeginResource: encoding VIM-latin1
%%BeginDocument: /usr/share/vim/vim71/print/latin1.ps
%!PS-Adobe-3.0 Resource-Encoding
%%Title: VIM-latin1
%%Version: 1.0 0
%%EndComments
/VIM-latin1[
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/space /exclam /quotedbl /numbersign /dollar /percent /ampersand /quotesingle
/parenleft /parenright /asterisk /plus /comma /minus /period /slash
/zero /one /two /three /four /five /six /seven
/eight /nine /colon /semicolon /less /equal /greater /question
/at /A /B /C /D /E /F /G
/H /I /J /K /L /M /N /O
/P /Q /R /S /T /U /V /W
/X /Y /Z /bracketleft /backslash /bracketright /asciicircum /underscore
/grave /a /b /c /d /e /f /g
/h /i /j /k /l /m /n /o
/p /q /r /s /t /u /v /w
/x /y /z /braceleft /bar /braceright /asciitilde /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/space /exclamdown /cent /sterling /currency /yen /brokenbar /section
/dieresis /copyright /ordfeminine /guillemotleft /logicalnot /hyphen /registered /macron
/degree /plusminus /twosuperior /threesuperior /acute /mu /paragraph /periodcentered
/cedilla /onesuperior /ordmasculine /guillemotright /onequarter /onehalf /threequarters /questiondown
/Agrave /Aacute /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla
/Egrave /Eacute /Ecircumflex /Edieresis /Igrave /Iacute /Icircumflex /Idieresis
/Eth /Ntilde /Ograve /Oacute /Ocircumflex /Otilde /Odieresis /multiply
/Oslash /Ugrave /Uacute /Ucircumflex /Udieresis /Yacute /Thorn /germandbls
/agrave /aacute /acircumflex /atilde /adieresis /aring /ae /ccedilla
/egrave /eacute /ecircumflex /edieresis /igrave /iacute /icircumflex /idieresis
/eth /ntilde /ograve /oacute /ocircumflex /otilde /odieresis /divide
/oslash /ugrave /uacute /ucircumflex /udieresis /yacute /thorn /ydieresis]
/Encoding defineresource pop
% vim:ff=unix:
%%EOF
%%EndDocument
%%EndResource
%%EndProlog
%%BeginSetup
595 842 0 sps
1 nc
T F dt
T c
%%IncludeResource: font Courier
/_F0 /VIM-latin1 /Courier ref
/F0 10 /_F0 ffs
%%IncludeResource: font Courier-Bold
/_F1 /VIM-latin1 /Courier-Bold ref
/F1 10 /_F1 ffs
%%IncludeResource: font Courier-Oblique
/_F2 /VIM-latin1 /Courier-Oblique ref
/F2 10 /_F2 ffs
%%IncludeResource: font Courier-BoldOblique
/_F3 /VIM-latin1 /Courier-BoldOblique ref
/F3 10 /_F3 ffs
/UO -1 d
/UW 0.5 d
/BO -2.5 d
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
sv
0 g
F0 sf
%%EndPageSetup
F1 sf
(src/util.c                                                                  Pagina 1)59.5 792.4 ms
0 0 0.498 r
(#include )59.5 772.4 ms
0.498 0 0.498 r
("h/types.h")s
0 0 0.498 r
(#include )59.5 762.4 ms
0.498 0 0.498 r
("h/util.h")s
0 0 0.498 r
(#include )59.5 752.4 ms
0.498 0 0.498 r
("h/segment.h")s
0 0 0.498 r
(#include )59.5 732.4 ms
0.498 0 0.498 r
(<config.h>)s
0 0 0.498 r
(#include )59.5 722.4 ms
0.498 0 0.498 r
(<fcntl.h>)s
0 0 0.498 r
(#include )59.5 712.4 ms
0.498 0 0.498 r
(<netinet/tcp.h>)s
0 0 0.498 r
(#include )59.5 702.4 ms
0.498 0 0.498 r
(<string.h>)s
0 0 0.498 r
(#include )59.5 692.4 ms
0.498 0 0.498 r
(<sys/ioctl.h>)s
0 0.498 0.498 r
(/*******************************************************************************)59.5 662.4 ms
(                              Funzioni pubbliche)59.5 652.4 ms
(*******************************************************************************/)59.5 642.4 ms
(/*)59.5 622.4 ms
( * Funzioni su struct sockaddr_in e porte.)59.5 612.4 ms
( */)59.5 602.4 ms
0 0.498 0 r
(bool)59.5 582.4 ms
F0 sf
0 g
(addr_is_set \()59.5 572.4 ms
F1 sf
0 0.498 0 r
(struct)s
F0 sf
0 g
( sockaddr_in *addr\))s
({)59.5 562.4 ms
(        )59.5 552.4 ms
F1 sf
0 0.498 0.498 r
(/* Ritorna FALSE se addr e' ancora inizializzata a zero, TRUE)s
(         * altrimenti.)59.5 542.4 ms
(         *)59.5 532.4 ms
(         * )59.5 522.4 ms
F0 sf
0 g
(XXX)s
F1 sf
0 0.498 0.498 r
( Non controlla tutta la struttura, si affida al valore di)s
(         * )59.5 512.4 ms
F0 sf
0 g
(XXX)s
F1 sf
0 0.498 0.498 r
( sin_family. */)s
F0 sf
0 g
(        assert \(addr != )59.5 492.4 ms
F1 sf
0.498 0 0.498 r
(NULL)s
F0 sf
0 g
(\);)s
(        )59.5 472.4 ms
F1 sf
0.498 0.498 0 r
(if)s
F0 sf
0 g
( \(addr->sin_family == AF_INET\))s
(                )59.5 462.4 ms
F1 sf
0.498 0.498 0 r
(return)s
F0 sf
0 g
( TRUE;)s
(        )59.5 452.4 ms
F1 sf
0.498 0.498 0 r
(return)s
F0 sf
0 g
( FALSE;)s
(})59.5 442.4 ms
F1 sf
0 0.498 0 r
(char)59.5 412.4 ms
F0 sf
0 g
( *)s
(addrstr \()59.5 402.4 ms
F1 sf
0 0.498 0 r
(struct)s
F0 sf
0 g
( sockaddr_in *addr, )s
F1 sf
0 0.498 0 r
(char)s
F0 sf
0 g
( *buf\))s
({)59.5 392.4 ms
(        )59.5 382.4 ms
F1 sf
0 0.498 0.498 r
(/* Copia la stringa in formato xxx.xxx.xxx.xxx:yyyyy nel buffer buf,)s
(         * che deve essere grande a sufficienza. */)59.5 372.4 ms
F0 sf
0 g
(        )59.5 352.4 ms
F1 sf
0 0.498 0 r
(char)s
F0 sf
0 g
( *name;)s
(        assert \(addr != )59.5 332.4 ms
F1 sf
0.498 0 0.498 r
(NULL)s
F0 sf
0 g
(\);)s
(        assert \(buf != )59.5 322.4 ms
F1 sf
0.498 0 0.498 r
(NULL)s
F0 sf
0 g
(\);)s
(        )59.5 302.4 ms
F1 sf
0 0.498 0.498 r
(/* Copia dell'indirizzo ip. */)s
F0 sf
0 g
(        name = \()59.5 292.4 ms
F1 sf
0 0.498 0 r
(char)s
F0 sf
0 g
( *\) inet_ntop \(AF_INET, &addr->sin_addr, buf,)s
(                        INET_ADDRSTRLEN\);)59.5 282.4 ms
(        assert \(name != )59.5 272.4 ms
F1 sf
0.498 0 0.498 r
(NULL)s
F0 sf
0 g
(\);)s
(        )59.5 252.4 ms
F1 sf
0 0.498 0.498 r
(/* Copia del numero di porta. */)s
F0 sf
0 g
(        name = strchr \(name, )59.5 242.4 ms
F1 sf
0.498 0 0 r
('\\0')s
F0 sf
0 g
(\);)s
(        sprintf \(name, )59.5 232.4 ms
F1 sf
0.498 0 0.498 r
(":)s
0.498 0 0 r
(%d)s
0.498 0 0.498 r
(")s
F0 sf
0 g
(, ntohs \(addr->sin_port\)\);)s
(        )59.5 222.4 ms
F1 sf
0 0.498 0.498 r
(/* Posiziona name alla fine della stringa. */)s
F0 sf
0 g
(        name = strchr \(name, )59.5 212.4 ms
F1 sf
0.498 0 0 r
('\\0')s
F0 sf
0 g
(\);)s
(        )59.5 202.4 ms
F1 sf
0 0.498 0.498 r
(/* Overflow? */)s
F0 sf
0 g
(        assert \(name < \(buf + INET_ADDRSTRLEN + )59.5 192.4 ms
F1 sf
0.498 0 0.498 r
(1)s
F0 sf
0 g
( + )s
F1 sf
0.498 0 0.498 r
(5)s
F0 sf
0 g
(\)\);)s
(        )59.5 172.4 ms
F1 sf
0.498 0.498 0 r
(return)s
F0 sf
0 g
( name;)s
(})59.5 162.4 ms
F1 sf
0 0.498 0 r
(int)59.5 132.4 ms
F0 sf
0 g
(set_addr \()59.5 122.4 ms
F1 sf
0 0.498 0 r
(struct)s
F0 sf
0 g
( sockaddr_in *addr, )s
F1 sf
0 0.498 0 r
(char)s
F0 sf
0 g
( *ip, port_t port\))s
({)59.5 112.4 ms
(        )59.5 102.4 ms
F1 sf
0 0.498 0.498 r
(/* Imposta addr secondo l'indirizzo ip, in formato xxx.xxx.xxx.xxx, e)s
(         * la porta port.)59.5 92.4 ms
(         *)59.5 82.4 ms
(         * Ritorna -1 se fallisce, 0 se riesce. */)59.5 72.4 ms
F0 sf
0 g
(        assert \(addr != )59.5 52.4 ms
F1 sf
0.498 0 0.498 r
(NULL)s
F0 sf
0 g
(\);)s
re sp
%%PageTrailer
%%Page: 2 2
%%BeginPageSetup
sv
0 g
F0 sf
%%EndPageSetup
F1 sf
(src/util.c                                                                  Pagina 2)59.5 792.4 ms
F0 sf
(        memset \(addr, )59.5 762.4 ms
F1 sf
0.498 0 0.498 r
(0)s
F0 sf
0 g
(, )s
F1 sf
0.498 0.498 0 r
(sizeof)s
F0 sf
0 g
( \()s
F1 sf
0 0.498 0 r
(struct)s
F0 sf
0 g
( sockaddr_in\)\);)s
(        addr->sin_family = AF_INET;)59.5 752.4 ms
(        )59.5 732.4 ms
F1 sf
0.498 0.498 0 r
(if)s
F0 sf
0 g
( \(ip == )s
F1 sf
0.498 0 0.498 r
(NULL)s
F0 sf
0 g
(\))s
(                addr->sin_addr.s_addr = htonl \(INADDR_ANY\);)59.5 722.4 ms
(        )59.5 712.4 ms
F1 sf
0.498 0.498 0 r
(else)s
F0 sf
0 g
( )s
F1 sf
0.498 0.498 0 r
(if)s
F0 sf
0 g
( \(inet_pton \(AF_INET, ip, &addr->sin_addr\) == )s
F1 sf
0.498 0 0.498 r
(0)s
F0 sf
0 g
(\))s
(                )59.5 702.4 ms
F1 sf
0.498 0.498 0 r
(return)s
F0 sf
0 g
( -)s
F1 sf
0.498 0 0.498 r
(1)s
F0 sf
0 g
(;)s
(        addr->sin_port = htons \(port\);)59.5 692.4 ms
(        )59.5 672.4 ms
F1 sf
0.498 0.498 0 r
(return)s
F0 sf
0 g
( )s
F1 sf
0.498 0 0.498 r
(0)s
F0 sf
0 g
(;)s
(})59.5 662.4 ms
F1 sf
0 0.498 0.498 r
(/*)59.5 632.4 ms
( * Funzioni su stringhe.)59.5 622.4 ms
( */)59.5 612.4 ms
0 0.498 0 r
(bool)59.5 592.4 ms
F0 sf
0 g
(streq \()59.5 582.4 ms
F1 sf
0 0.498 0 r
(char)s
F0 sf
0 g
( *str1, )s
F1 sf
0 0.498 0 r
(char)s
F0 sf
0 g
( *str2\))s
({)59.5 572.4 ms
(        )59.5 562.4 ms
F1 sf
0 0.498 0.498 r
(/* Ritorna TRUE se le due stringhe sono uguali. */)s
F0 sf
0 g
(        )59.5 542.4 ms
F1 sf
0 0.498 0 r
(int)s
F0 sf
0 g
( cmp;)s
(        assert \(str1 != )59.5 522.4 ms
F1 sf
0.498 0 0.498 r
(NULL)s
F0 sf
0 g
(\);)s
(        assert \(str2 != )59.5 512.4 ms
F1 sf
0.498 0 0.498 r
(NULL)s
F0 sf
0 g
(\);)s
(        cmp = strcmp \(str1, str2\);)59.5 492.4 ms
(        )59.5 472.4 ms
F1 sf
0.498 0.498 0 r
(if)s
F0 sf
0 g
( \(cmp == )s
F1 sf
0.498 0 0.498 r
(0)s
F0 sf
0 g
(\) )s
F1 sf
0.498 0.498 0 r
(return)s
F0 sf
0 g
( TRUE;)s
(        )59.5 462.4 ms
F1 sf
0.498 0.498 0 r
(return)s
F0 sf
0 g
( FALSE;)s
(})59.5 452.4 ms
F1 sf
0 0.498 0.498 r
(/*)59.5 422.4 ms
( * Funzioni per la gestione della memoria.)59.5 412.4 ms
( */)59.5 402.4 ms
0 0.498 0 r
(void)59.5 382.4 ms
F0 sf
0 g
(xfree \()59.5 372.4 ms
F1 sf
0 0.498 0 r
(void)s
F0 sf
0 g
( *ptr\))s
({)59.5 362.4 ms
(        )59.5 352.4 ms
F1 sf
0 0.498 0.498 r
(/* Free sicura. */)s
F0 sf
0 g
(        )59.5 342.4 ms
F1 sf
0.498 0.498 0 r
(if)s
F0 sf
0 g
( \(ptr != )s
F1 sf
0.498 0 0.498 r
(NULL)s
F0 sf
0 g
(\))s
(                free \(ptr\);)59.5 332.4 ms
(})59.5 322.4 ms
F1 sf
0 0.498 0 r
(void)59.5 292.4 ms
F0 sf
0 g
( *)s
(xmalloc \()59.5 282.4 ms
F1 sf
0 0.498 0 r
(size_t)s
F0 sf
0 g
( size\))s
({)59.5 272.4 ms
(        )59.5 262.4 ms
F1 sf
0 0.498 0.498 r
(/* Malloc sicura. */)s
F0 sf
0 g
(        )59.5 252.4 ms
F1 sf
0 0.498 0 r
(void)s
F0 sf
0 g
( *ptr;)s
(        assert \(size > )59.5 232.4 ms
F1 sf
0.498 0 0.498 r
(0)s
F0 sf
0 g
(\);)s
(        ptr = malloc \(size\);)59.5 212.4 ms
(        )59.5 202.4 ms
F1 sf
0.498 0.498 0 r
(if)s
F0 sf
0 g
( \(ptr == )s
F1 sf
0.498 0 0.498 r
(NULL)s
F0 sf
0 g
(\) {)s
(                segwrap_flush_cache \(\);)59.5 192.4 ms
(                ptr = malloc \(size\);)59.5 182.4 ms
(                )59.5 172.4 ms
F1 sf
0.498 0.498 0 r
(if)s
F0 sf
0 g
( \(ptr == )s
F1 sf
0.498 0 0.498 r
(NULL)s
F0 sf
0 g
(\) {)s
(                        perror \()59.5 162.4 ms
F1 sf
0.498 0 0.498 r
("Impossibile allocare memoria")s
F0 sf
0 g
(\);)s
(                        exit \()59.5 152.4 ms
F1 sf
0.498 0 0.498 r
(EXIT_FAILURE)s
F0 sf
0 g
(\);)s
(                })59.5 142.4 ms
(        })59.5 132.4 ms
(        )59.5 122.4 ms
F1 sf
0.498 0.498 0 r
(return)s
F0 sf
0 g
( ptr;)s
(})59.5 112.4 ms
F1 sf
0 0.498 0.498 r
(/*)59.5 82.4 ms
( * Funzioni su socket e operazioni di rete.)59.5 72.4 ms
( */)59.5 62.4 ms
re sp
%%PageTrailer
%%Page: 3 3
%%BeginPageSetup
sv
0 g
F0 sf
%%EndPageSetup
F1 sf
(src/util.c                                                                  Pagina 3)59.5 792.4 ms
0 0.498 0 r
(int)59.5 772.4 ms
F0 sf
0 g
(tcp_close \(fd_t *fdprt\))59.5 762.4 ms
({)59.5 752.4 ms
(        )59.5 742.4 ms
F1 sf
0 0.498 0.498 r
(/* Chiude il file descriptor puntato da fdprt e lo inizializza a -1.)s
(         * Ritorna il valore e l'errno di close. */)59.5 732.4 ms
F0 sf
0 g
(        )59.5 712.4 ms
F1 sf
0 0.498 0 r
(int)s
F0 sf
0 g
( err;)s
(        assert \(fdprt != )59.5 692.4 ms
F1 sf
0.498 0 0.498 r
(NULL)s
F0 sf
0 g
(\);)s
(        assert \(*fdprt >= )59.5 682.4 ms
F1 sf
0.498 0 0.498 r
(0)s
F0 sf
0 g
(\);)s
(        )59.5 662.4 ms
F1 sf
0.498 0.498 0 r
(do)s
F0 sf
0 g
( {)s
(                err = close \(*fdprt\);)59.5 652.4 ms
(        } )59.5 642.4 ms
F1 sf
0.498 0.498 0 r
(while)s
F0 sf
0 g
( \(err == -)s
F1 sf
0.498 0 0.498 r
(1)s
F0 sf
0 g
( && errno == )s
F1 sf
0.498 0 0.498 r
(EINTR)s
F0 sf
0 g
(\);)s
(        *fdprt = -)59.5 622.4 ms
F1 sf
0.498 0 0.498 r
(1)s
F0 sf
0 g
(;)s
(        )59.5 612.4 ms
F1 sf
0.498 0.498 0 r
(return)s
F0 sf
0 g
( err;)s
(})59.5 602.4 ms
F1 sf
0 0.498 0 r
(ssize_t)59.5 572.4 ms
F0 sf
0 g
(tcp_get_buffer_size \(fd_t sockfd, )59.5 562.4 ms
F1 sf
0 0.498 0 r
(int)s
F0 sf
0 g
( bufname\))s
({)59.5 552.4 ms
(        )59.5 542.4 ms
F1 sf
0 0.498 0 r
(int)s
F0 sf
0 g
( err;)s
(        )59.5 532.4 ms
F1 sf
0 0.498 0 r
(int)s
F0 sf
0 g
( optval;)s
(        socklen_t optlen;)59.5 522.4 ms
(        assert \(sockfd >= )59.5 502.4 ms
F1 sf
0.498 0 0.498 r
(0)s
F0 sf
0 g
(\);)s
(        assert \(bufname == SO_SNDBUF || bufname == SO_RCVBUF\);)59.5 492.4 ms
(        optlen = )59.5 472.4 ms
F1 sf
0.498 0.498 0 r
(sizeof)s
F0 sf
0 g
( \(optval\);)s
(        err = getsockopt \(sockfd, SOL_SOCKET, bufname, &optval, &optlen\);)59.5 462.4 ms
(        )59.5 452.4 ms
F1 sf
0.498 0.498 0 r
(if)s
F0 sf
0 g
( \(err < )s
F1 sf
0.498 0 0.498 r
(0)s
F0 sf
0 g
(\) {)s
(                )59.5 442.4 ms
F1 sf
0.498 0.498 0 r
(return)s
F0 sf
0 g
( -)s
F1 sf
0.498 0 0.498 r
(1)s
F0 sf
0 g
(;)s
(        })59.5 432.4 ms
F1 sf
0 0 0.498 r
(#ifdef LINUX_OS)59.5 422.4 ms
F0 sf
0 g
(        optval = optval / )59.5 412.4 ms
F1 sf
0.498 0 0.498 r
(2)s
F0 sf
0 g
(;)s
F1 sf
0 0 0.498 r
(#endif)59.5 402.4 ms
F0 sf
0 g
(        )59.5 392.4 ms
F1 sf
0.498 0.498 0 r
(return)s
F0 sf
0 g
( optval;)s
(})59.5 382.4 ms
F1 sf
0 0.498 0 r
(int)59.5 352.4 ms
F0 sf
0 g
(tcp_get_used_space \(fd_t fd, )59.5 342.4 ms
F1 sf
0 0.498 0 r
(int)s
F0 sf
0 g
( buf\))s
({)59.5 332.4 ms
(        )59.5 322.4 ms
F1 sf
0 0.498 0 r
(int)s
F0 sf
0 g
( amount;)s
(        )59.5 312.4 ms
F1 sf
0 0.498 0 r
(int)s
F0 sf
0 g
( err;)s
(        assert \(fd >= )59.5 292.4 ms
F1 sf
0.498 0 0.498 r
(0)s
F0 sf
0 g
(\);)s
(        assert \(buf == SO_RCVBUF || buf == SO_SNDBUF\);)59.5 282.4 ms
(        err = ioctl \(fd, buf == SO_SNDBUF ? TIOCOUTQ : FIONREAD, &amount\);)59.5 262.4 ms
(        )59.5 252.4 ms
F1 sf
0.498 0.498 0 r
(if)s
F0 sf
0 g
( \(!err\))s
(                )59.5 242.4 ms
F1 sf
0.498 0.498 0 r
(return)s
F0 sf
0 g
( amount;)s
(        )59.5 232.4 ms
F1 sf
0.498 0.498 0 r
(return)s
F0 sf
0 g
( err;)s
(})59.5 222.4 ms
F1 sf
0 0.498 0 r
(int)59.5 192.4 ms
F0 sf
0 g
(tcp_set_block \(fd_t fd, )59.5 182.4 ms
F1 sf
0 0.498 0 r
(bool)s
F0 sf
0 g
( must_block\))s
({)59.5 172.4 ms
(        )59.5 162.4 ms
F1 sf
0 0.498 0.498 r
(/* Se must_block = TRUE, imposta fd come bloccante, altrimenti come)s
(         * non bloccante.)59.5 152.4 ms
(         *)59.5 142.4 ms
(         * Ritorna 0 se riesce, -1 altrimenti. */)59.5 132.4 ms
F0 sf
0 g
(        )59.5 112.4 ms
F1 sf
0 0.498 0 r
(int)s
F0 sf
0 g
( flags;)s
(        assert \(fd >= )59.5 92.4 ms
F1 sf
0.498 0 0.498 r
(0)s
F0 sf
0 g
(\);)s
(        assert \(must_block == TRUE || must_block == FALSE\);)59.5 82.4 ms
(        flags = fcntl \(fd, F_GETFL, )59.5 62.4 ms
F1 sf
0.498 0 0.498 r
(0)s
F0 sf
0 g
(\);)s
(        )59.5 52.4 ms
F1 sf
0.498 0.498 0 r
(if)s
F0 sf
0 g
( \(flags != -)s
F1 sf
0.498 0 0.498 r
(1)s
F0 sf
0 g
(\) {)s
re sp
%%PageTrailer
%%Page: 4 4
%%BeginPageSetup
sv
0 g
F0 sf
%%EndPageSetup
F1 sf
(src/util.c                                                                  Pagina 4)59.5 792.4 ms
F0 sf
(                )59.5 772.4 ms
F1 sf
0.498 0.498 0 r
(if)s
F0 sf
0 g
( \(must_block\) {)s
(                        flags &= ~O_NONBLOCK;)59.5 762.4 ms
(                } )59.5 752.4 ms
F1 sf
0.498 0.498 0 r
(else)s
F0 sf
0 g
( {)s
(                        flags |= O_NONBLOCK;)59.5 742.4 ms
(                })59.5 732.4 ms
(                )59.5 722.4 ms
F1 sf
0.498 0.498 0 r
(if)s
F0 sf
0 g
( \(fcntl \(fd, F_SETFL, flags\) != -)s
F1 sf
0.498 0 0.498 r
(1)s
F0 sf
0 g
(\) {)s
(                        )59.5 712.4 ms
F1 sf
0.498 0.498 0 r
(return)s
F0 sf
0 g
( )s
F1 sf
0.498 0 0.498 r
(0)s
F0 sf
0 g
(;)s
(                })59.5 702.4 ms
(        })59.5 692.4 ms
(        )59.5 682.4 ms
F1 sf
0.498 0.498 0 r
(return)s
F0 sf
0 g
( -)s
F1 sf
0.498 0 0.498 r
(1)s
F0 sf
0 g
(;)s
(})59.5 672.4 ms
F1 sf
0 0.498 0 r
(int)59.5 642.4 ms
F0 sf
0 g
(tcp_set_buffer_size \(fd_t sockfd, )59.5 632.4 ms
F1 sf
0 0.498 0 r
(int)s
F0 sf
0 g
( bufname, )s
F1 sf
0 0.498 0 r
(size_t)s
F0 sf
0 g
( buflen\))s
({)59.5 622.4 ms
(        assert \(sockfd > )59.5 602.4 ms
F1 sf
0.498 0 0.498 r
(0)s
F0 sf
0 g
(\);)s
(        assert \(bufname == SO_SNDBUF || bufname == SO_RCVBUF\);)59.5 592.4 ms
(        assert \(buflen > )59.5 582.4 ms
F1 sf
0.498 0 0.498 r
(0)s
F0 sf
0 g
(\);)s
(        )59.5 562.4 ms
F1 sf
0.498 0.498 0 r
(return)s
F0 sf
0 g
( setsockopt \(sockfd, SOL_SOCKET,)s
(                           bufname, &buflen, )59.5 552.4 ms
F1 sf
0.498 0.498 0 r
(sizeof)s
F0 sf
0 g
( \(buflen\)\);)s
(})59.5 542.4 ms
F1 sf
0 0.498 0 r
(int)59.5 512.4 ms
F0 sf
0 g
(tcp_set_nagle \(fd_t fd, )59.5 502.4 ms
F1 sf
0 0.498 0 r
(bool)s
F0 sf
0 g
( active\))s
({)59.5 492.4 ms
(        )59.5 482.4 ms
F1 sf
0 0.498 0.498 r
(/* Se active = TRUE imposta l'algoritmo di Nagle sul file descriptor)s
(         * fd, altrimenti attiva l'opzione TCP_NODELAY.)59.5 472.4 ms
(         *)59.5 462.4 ms
(         * Ritorna TRUE se riesce, FALSE altrimenti. */)59.5 452.4 ms
F0 sf
0 g
(        )59.5 432.4 ms
F1 sf
0 0.498 0 r
(int)s
F0 sf
0 g
( err;)s
(        )59.5 422.4 ms
F1 sf
0 0.498 0 r
(int)s
F0 sf
0 g
( optval;)s
(        assert \(fd >= )59.5 402.4 ms
F1 sf
0.498 0 0.498 r
(0)s
F0 sf
0 g
(\);)s
(        assert \(active == TRUE || active == FALSE\);)59.5 392.4 ms
(        optval = \(active == TRUE ? )59.5 372.4 ms
F1 sf
0.498 0 0.498 r
(0)s
F0 sf
0 g
( : )s
F1 sf
0.498 0 0.498 r
(1)s
F0 sf
0 g
(\);)s
(        err = setsockopt \(fd, IPPROTO_TCP, TCP_NODELAY,)59.5 352.4 ms
(                          &optval, )59.5 342.4 ms
F1 sf
0.498 0.498 0 r
(sizeof)s
F0 sf
0 g
( \(optval\)\);)s
(        )59.5 332.4 ms
F1 sf
0.498 0.498 0 r
(return)s
F0 sf
0 g
( err;)s
(})59.5 322.4 ms
F1 sf
0 0.498 0 r
(int)59.5 292.4 ms
F0 sf
0 g
(tcp_set_reusable \(fd_t fd, )59.5 282.4 ms
F1 sf
0 0.498 0 r
(bool)s
F0 sf
0 g
( reusable\))s
({)59.5 272.4 ms
(        )59.5 262.4 ms
F1 sf
0 0.498 0 r
(int)s
F0 sf
0 g
( err;)s
(        )59.5 252.4 ms
F1 sf
0 0.498 0 r
(int)s
F0 sf
0 g
( optval;)s
(        assert \(fd >= )59.5 232.4 ms
F1 sf
0.498 0 0.498 r
(0)s
F0 sf
0 g
(\);)s
(        assert \(reusable == TRUE || reusable == FALSE\);)59.5 222.4 ms
(        optval = \(reusable == TRUE ? )59.5 202.4 ms
F1 sf
0.498 0 0.498 r
(1)s
F0 sf
0 g
( : )s
F1 sf
0.498 0 0.498 r
(0)s
F0 sf
0 g
(\);)s
(        err = setsockopt \(fd, SOL_SOCKET, SO_REUSEADDR,)59.5 182.4 ms
(                          &optval, )59.5 172.4 ms
F1 sf
0.498 0.498 0 r
(sizeof)s
F0 sf
0 g
( \(optval\)\);)s
(        )59.5 152.4 ms
F1 sf
0.498 0.498 0 r
(return)s
F0 sf
0 g
( err;)s
(})59.5 142.4 ms
F1 sf
0 0.498 0 r
(void)59.5 112.4 ms
F0 sf
0 g
(tcp_sockname \(fd_t fd, )59.5 102.4 ms
F1 sf
0 0.498 0 r
(struct)s
F0 sf
0 g
( sockaddr_in *laddr\))s
({)59.5 92.4 ms
(        )59.5 82.4 ms
F1 sf
0 0.498 0.498 r
(/* Wrapper per nascondere le bruttezze di getsockname. */)s
F0 sf
0 g
(        )59.5 62.4 ms
F1 sf
0 0.498 0 r
(int)s
F0 sf
0 g
( err;)s
(        socklen_t len;)59.5 52.4 ms
re sp
%%PageTrailer
%%Page: 5 5
%%BeginPageSetup
sv
0 g
F0 sf
%%EndPageSetup
F1 sf
(src/util.c                                                                  Pagina 5)59.5 792.4 ms
F0 sf
(        assert \(fd >= )59.5 762.4 ms
F1 sf
0.498 0 0.498 r
(0)s
F0 sf
0 g
(\);)s
(        assert \(laddr != )59.5 752.4 ms
F1 sf
0.498 0 0.498 r
(NULL)s
F0 sf
0 g
(\);)s
(        assert \(!addr_is_set \(laddr\)\);)59.5 742.4 ms
(        len = )59.5 722.4 ms
F1 sf
0.498 0.498 0 r
(sizeof)s
F0 sf
0 g
( \(*laddr\);)s
(        err = getsockname \(fd, \()59.5 702.4 ms
F1 sf
0 0.498 0 r
(struct)s
F0 sf
0 g
( sockaddr *\) laddr, &len\);)s
(        assert \(!err\);)59.5 692.4 ms
(})59.5 682.4 ms
(fd_t)59.5 652.4 ms
(xtcp_socket \()59.5 642.4 ms
F1 sf
0 0.498 0 r
(void)s
F0 sf
0 g
(\))s
({)59.5 632.4 ms
(        )59.5 622.4 ms
F1 sf
0 0.498 0.498 r
(/* Socket sicura. */)s
F0 sf
0 g
(        fd_t newfd = socket \(AF_INET, SOCK_STREAM, )59.5 602.4 ms
F1 sf
0.498 0 0.498 r
(0)s
F0 sf
0 g
(\);)s
(        )59.5 592.4 ms
F1 sf
0.498 0.498 0 r
(if)s
F0 sf
0 g
( \(newfd < )s
F1 sf
0.498 0 0.498 r
(0)s
F0 sf
0 g
(\) {)s
(                perror \()59.5 582.4 ms
F1 sf
0.498 0 0.498 r
("Impossibile creare il socket")s
F0 sf
0 g
(\);)s
(                exit \()59.5 572.4 ms
F1 sf
0.498 0 0.498 r
(EXIT_FAILURE)s
F0 sf
0 g
(\);)s
(        })59.5 562.4 ms
(        )59.5 552.4 ms
F1 sf
0.498 0.498 0 r
(return)s
F0 sf
0 g
( newfd;)s
(})59.5 542.4 ms
re sp
%%PageTrailer
%%Trailer
%%Pages: 5
%%EOF
